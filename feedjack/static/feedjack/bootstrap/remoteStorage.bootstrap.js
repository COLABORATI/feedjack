// Generated by CoffeeScript 1.3.3
(function() {
  var localStorage_prefix, receive_token_url, script;

  script = $('script').last();

  localStorage_prefix = script.data('localStorage_prefix');

  receive_token_url = script.data('receive_token_url');

  $(document).ready(function() {
    var authorized, connect_handler, connected, rs_form, state_update_hook, storage;
    rs_form = $('#rs-form');
    rs_form.click(function(ev) {
      return ev.stopPropagation();
    });
    storage = (function() {
      return {
        connect: function(user_address, callback) {
          return remoteStorage.getStorageInfo(user_address, function(error, storageInfo) {
            if (error) {
              alert('Could not load storage info');
              console.log(error);
            } else {
              console.log('Storage info received:');
              console.log(storageInfo);
            }
            return callback(error, storageInfo);
          });
        },
        authorize: function(scopes, callback) {
          var redirectUri, storageInfo;
          storageInfo = JSON.parse(localStorage.getItem('userStorageInfo'));
          redirectUri = location.protocol + '//' + location.host + receive_token_url;
          window.addEventListener('message', function(event) {
            if (event.origin === location.protocol + '//' + location.host) {
              console.log('Received an OAuth token: ' + event.data);
              localStorage.setItem('bearerToken', event.data);
              return callback();
            }
          }, false);
          return window.open(remoteStorage.createOAuthAddress(storageInfo, scopes, redirectUri));
        },
        getData: function(path, callback) {
          var client, storageInfo, token;
          storageInfo = JSON.parse(localStorage.getItem('userStorageInfo'));
          if (path.split('/').length < 2) {
            cb('error: path ' + path + ' contains no slashes');
            return;
          } else {
            if (path.split('/')[0] === 'public') {
              client = remoteStorage.createClient(storageInfo, '');
            } else {
              token = localStorage.getItem('bearerToken');
              client = remoteStorage.createClient(storageInfo, '', token);
            }
          }
          return client.get(path, function(error, data) {
            if (error === 401) {
              alert('Your session has expired. Please connect to your remoteStorage again.');
            } else {
              if (error) {
                alert('Could not find "' + path + '" on the remoteStorage');
                console.log(error);
              } else {
                if (data === void 0) {
                  console.log('There wasn\'t anything for "' + path + '"');
                } else {
                  console.log('We received this for item "' + path + '": ' + data);
                }
              }
            }
            return callback(error, data);
          });
        },
        putData: function(path, value, callback) {
          var client, storageInfo, token;
          storageInfo = JSON.parse(localStorage.getItem('userStorageInfo'));
          token = localStorage.getItem('bearerToken');
          client = remoteStorage.createClient(storageInfo, '', token);
          return client.put(path, value, function(error) {
            if (error === 401) {
              alert('Your session has expired. Please connect to your remoteStorage again.');
            } else {
              if (error) {
                alert('Could not store "' + path + '"');
                console.log(error);
              } else {
                console.log('Stored "' + value + '" for item "' + path + '"');
              }
            }
            return callback(error);
          });
        }
      };
    })();
    connected = localStorage.getItem('userStorageInfo') !== null;
    authorized = localStorage.getItem('bearerToken') !== null;
    state_update_hook = function() {
      var hide, show, _ref, _ref1;
      _ref = connected ? ['connected', 'disconnected'] : ['disconnected', 'connected'], show = _ref[0], hide = _ref[1];
      rs_form.find("span." + show).show();
      rs_form.find("span." + hide).hide();
      _ref1 = authorized ? ['authorized', 'unauthorized'] : ['unauthorized', 'authorized'], show = _ref1[0], hide = _ref1[1];
      rs_form.find("span." + show).show();
      return rs_form.find("span." + hide).hide();
    };
    state_update_hook();
    connect_handler = function(ev) {
      var user_address;
      if (!connected) {
        user_address = rs_form.find('input[name="userAddress"]').val();
        storage.connect(user_address, function(error, storageInfo) {
          if (error) {
            connected = false;
          } else {
            localStorage.setItem('userStorageInfo', JSON.stringify(storageInfo));
            localStorage.setItem('userAddress', user_address);
            connected = true;
          }
          return state_update_hook();
        });
      } else {
        localStorage.removeItem('userStorageInfo');
        localStorage.removeItem('bearerToken');
        connected = authorized = false;
        state_update_hook();
        connect_handler(ev);
      }
      return false;
    };
    $('#connect').click(connect_handler);
    return $('#authorize').click(function() {
      if (!authorized) {
        storage.authorize(['public/tutorial:rw', 'tutorial:rw'], function() {
          authorized = true;
          return state_update_hook();
        });
      } else {
        localStorage.removeItem('bearerToken');
        authorized = false;
        state_update_hook();
      }
      return false;
    });
  });

}).call(this);
